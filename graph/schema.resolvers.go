package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"github.com/theycallmereza/tidymind-backend/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, email string) (*model.User, error) {
	id := fmt.Sprintf("U%d", len(r.users)+1)
	user := &model.User{ID: id, Username: username, Email: email}
	r.users = append(r.users, user)
	return user, nil
}

// findUserByID searches for a user in the resolver's user slice by their ID.
// It returns the user if found, or an error if no user with the given ID exists.
func (r *mutationResolver) findUserByID(userID string) (*model.User, error) {
	for _, u := range r.users {
		if u.ID == userID {
			return u, nil
		}
	}
	return nil, fmt.Errorf("user with ID %s not found", userID)
}

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, title string, description *string, userID string) (*model.Task, error) {
	user, err := r.findUserByID(userID)
	if err != nil {
		return nil, err
	}

	id := fmt.Sprintf("T%d", len(r.tasks)+1)
	task := &model.Task{
		ID:          id,
		Title:       title,
		Description: description,
		Status:      "pending",
		User:        user,
	}
	r.tasks = append(r.tasks, task)
	return task, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.users, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	return r.tasks, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
